B2:

public class SampleCollection {
    private static final int MOD = 998244353;

    public int countPlans(int[] low, int[] high) {
        int n = low.length;
        int maxHigh = 0;

        // Find the maximum value in high array to define the size of dp and prefix arrays
        for (int value : high) {
            maxHigh = Math.max(maxHigh, value);
        }

        int[][] dp = new int[n][maxHigh + 1];
        int[][] prefix = new int[n][maxHigh + 1];

        // Initialize the first row of dp and prefix arrays
        for (int j = low[0]; j <= high[0]; j++) {
            dp[0][j] = 1;
        }

        // Fill the prefix sum for the first row
        prefix[0][low[0]] = dp[0][low[0]];
        for (int j = low[0] + 1; j <= high[0]; j++) {
            prefix[0][j] = (prefix[0][j - 1] + dp[0][j]) % MOD;
        }

        // Fill in the dp and prefix arrays
        for (int i = 1; i < n; i++) {
            for (int j = low[i]; j <= high[i]; j++) {
                dp[i][j] = prefix[i - 1][j - 1];
                if (low[i] > 0 && j > low[i]) {
                    dp[i][j] = (dp[i][j] - prefix[i - 1][low[i] - 1] + MOD) % MOD;
                }
            }
            // Fill the prefix sum for the current row
            prefix[i][low[i]] = dp[i][low[i]];
            for (int j = low[i] + 1; j <= high[i]; j++) {
                prefix[i][j] = (prefix[i][j - 1] + dp[i][j]) % MOD;
            }
        }

        // Calculate the final result by summing up the valid sequences
        int result = 0;
        for (int j = low[n - 1]; j <= high[n - 1]; j++) {
            result = (result + dp[n - 1][j]) % MOD;
        }

        return result;
    }

    public static void main(String[] args) {
        SampleCollection sc = new SampleCollection();

        // Test cases
        System.out.println(sc.countPlans(new int[]{1, 3, 1, 4}, new int[]{6, 5, 4, 6}));  // Should return: 4
        System.out.println(sc.countPlans(new int[]{30, 10}, new int[]{40, 20}));  // Should return: 0
        System.out.println(sc.countPlans(new int[]{10, 30}, new int[]{20, 40}));  // Should return: 121
        System.out.println(sc.countPlans(new int[]{35, 20}, new int[]{90, 45}));  // Should return: 55
        System.out.println(sc.countPlans(new int[]{4, 46, 46, 35, 20, 77, 20}, new int[]{41, 65, 84, 90, 49, 86, 88}));  // Should return: 2470
        System.out.println(sc.countPlans(new int[]{1}, new int[]{1000000000}));  // Should return: 1755647
    }
}



A2:

package com.test;

import java.util.Arrays;

public class AlicePuzzle {
  public int steps(String A, String B) {
    // 如果字符串A和B相等，则不需要移动
    if (A.equals(B)) {
      return 0;
    }

    // 如果A和B包含不同的字符，则无法完成转换，返回-1
    if (!sameCharacters(A, B)) {
      return -1;
    }

    // 找到A和B两个环重合的最小步数
    return minSteps(A, B);
  }

  // 判断字符串A和B是否由相同的字符组成
  private boolean sameCharacters(String A, String B) {
    char[] AChars = A.toCharArray();
    char[] BChars = B.toCharArray();
    Arrays.sort(AChars);
    Arrays.sort(BChars);
    return Arrays.equals(AChars, BChars);
  }

  // 找到A和B两个环重合的最小步数
  private int minSteps(String A, String B) {
    int n = A.length();
    int minSteps = Integer.MAX_VALUE;

    for (int i = 0; i < n; i++) {
      int steps = 0;
      for (int j = 0; j < n; j++) {
        if (A.charAt((i + j) % n) != B.charAt(j)) {
          steps++;
        }
      }
      minSteps = Math.min(minSteps, steps);
    }

    return minSteps;
  }

  public static void main(String[] args) {
    AlicePuzzle a = new AlicePuzzle();
    // 测试用例
    System.out.println(a.steps("ABC", "CBA")); // Returns: 2
    System.out.println(a.steps("A", "B")); // Returns: -1
    System.out.println(a.steps("AAABBB", "BBBAAA")); // Returns: 3
    System.out.println(a.steps("ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ZYXWVUTSRQPONMLKJIHGFEDCBA")); // Returns: 25
  }
}
